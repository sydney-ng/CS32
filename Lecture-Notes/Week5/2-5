INHERITANCE 

class Shape 
{
	void move (double xnew, double ynew);
	virtual void draw() const; // virtual in bade class 
	double m_x;
	double m_y; 
}; 

class WarningSymbol: public shape 
{
	void move (double xnew, double ynew); 
}

void WarningSymbol:: move (double xnew, double ynew)
{
	this->Shape::move (xnew,ynew); 
	//this isn’t needed
	//saying on the current object, which is warning symbol, call the warning symbol of shape 
	…flash three times… 
}

Warning Symbol WS; 
ws.move(10,20); 
f(ws) //this won’t work & won’t flash for Warning Symbol 

class Circle : public shape
{
	//void move (double xnew, double ynew);
	virtual void draw() const; //overrides shape::draw
	//double m_x;
	//double m_y;
	double m_r; 
}; 

class Rectangle : public shape 
{
	//void move (double xnew, double ynew);
	void draw() const; //overrides shape::draw
	//double m_x;
	//double m_y;
	double m_dx; 
	double m_dy; 
}; 

??? pic[100]; 


/*Circle ca[100];
Rectangle ra[100];
…

void f (Circle & c)
{
	c.move (10,20); 
	c.draw(); 
} 

void f (Rectangle& r)
{
	r.move(10,20); 
	r.draw(); 
}

… */ 
  
instead: 

//we can do this because it’s of class Shape, inherited! 

“heterogeneous collection” 
Shape* sa [100]; 
sa[0] = new Circle; 
sa[1] = new Rectangle; 
sa[2] = new Circle; 
for (int k = 0; k < ….; k ++)
{
	s[k]->draw(); //cannot do this because draw does not have draw(), you would need to put it in Shape itself 
			//w/ static binding, always calls Shape::draw 
}


void f (Shape& s)
{
	s.move(10,20); 
	s.draw(); // w/ static binding, always calls Shape::draw 
}

void Shape:: move (double xnew, double ynew)
{
	m_x = xnew; 
	m_y = ynew; 
}

void Shape:: draw ()
{
	..draw a vague cloud centered at m_x, m_y
} 

void Circle::draw()
{
	draw circle appropriately
}

void Rectangle::draw ()
{
	draw rectangle appropriately
}

//inheritance can let you declare a bunch of related classes very compactly 
generalization (superclass, base class):     class): 	Circle, Rectangle 	Dog, Monkey 

Compile-time binding/static binding
- at compile time, it will decide to bind this body of code to this draw 
- c++ default 
Dynamic Binding 


//if you have something that isn’t virtual in base class and you have the derived version, you may or may not get the behavior you wanted
//in C++ will not tell you WarningSymbol’s move is going to override Shape’s, which isn’t virtual  
//start off by making everything virtual, once you got the right behavior, you can see if none of them get overwritten 
	//cheaper for you to tell the compiler before hand which functions to use 

