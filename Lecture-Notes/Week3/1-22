// String.h

#ifndef STRING_INCLUDED
#define STRING_INCLUDED

class String
{
  public:
    String(const char* value = "");
    String(const String& other);
    ~String();
    String& operator=(const String& rhs);
    void swap(String& other);
    int size() const;
  private:
    char* m_text;
    int m_size;
};

#endif // STRING_INCLUDED

==========================================================

// String.cpp

#include "String.h"
#include <cstring>
using namespace std;

String::String(const char* value) //value can point to characters we can’t modify, value itself is a pointer value
				   //that you can point to different places, the thing that is const are chars
{
    if (value == nullptr)
        value = "";
    m_size = strlen(value);
    m_text = new char[m_size+1];
    strcpy(m_text, value);
    int i = 17; 
    int j = i * a 29;

	//compiler may not do i in j because it’s never used 
}

String::String(const String& other)
 : m_size(other.m_size)
{
    m_text = new char[m_size+1];
    strcpy(m_text, other.m_text);
}

String::~String()
{
    delete [] m_text;
}




=========================================================
void f(String t)
{
}

void g()
{
} 

char* somefunc(); 

int main()
{
	String x(somefunc()); 
	String y (); //String y (“”);
	g(); 
} 

//anytime you do things with pointers, make sure it will work with null pointer
=========================================================


String& String::operator=(const String& rhs)
{
    if (this != &rhs)
    {
        String temp(rhs);
        swap(temp);
    }
    return *this;
}

void String::swap(String& other)
{
    ... // exchange the m_size and other.m_size ints
    ... // exchange the m_text and other.m_text pointers
}

int String::size() const
{
    return m_size;
}

=========================================================

How an object gets destroyed: 
1. Execute body of destructor 
2. Destroy the data members
	1. builtin type: do nothing
	2. class type, call its destructor 
		//string knows how to take care of itself 
		//when we use pointers and stuff, we we have to take care of it
3. —— see later —— 


===========
CC called when PBV


CC:
 
String::String (const String& other)
{
	m_len = other.m_len; 
	m_text = new char [m_len+1]; 
	strcpy(m_text, other.m_text); 
} 

=========================================================
Class vs Struct

class x
{
	<- default is private
} 

struct y
{
	<- default is public
} 


struct String 
{
	String(const char* value = “”); 
	…
	private; 
		char *m_text; 
} 


void f(String t)
{
} 

=========================================================
//initialization is not the same thing as assignment 
