1. Guessing a number
	2^n => number of possibilities 
	2^10 => log 2
	for 10 million, you go systematically it will take on average 5 million tries  
	if you use this algorithm, it will be 24 tries 
2. inserting is costly (you would have to move everything down one)
	maybe its not good to just use an array 
	try another data structure 
3. interface (what) vs implementation (how)
	#include <iostream>
	#include <cmath>
	#include <cstdlib> //defines exit 
	using namespace std; 

	const double PI = 4 * atan(1.0); 
	class Circle 
	{
		public: 
			Circle (double x, double y, double r);
			bool scale (double factor); 
			double radius() const; //saying the circle will not be modified 
			void draw () const;
				
		private:
			//class invariant 
			//m_r > 0 ??? 
			double m_x; 
			double m_y; 
			double m_r; 
	}; 

	double area(const Circle& x); 

	int main ()
	{
		Circle blah (6,-5,3); 
		Circle c(-2,5,10);
		c.scale(2); 
		
		int f; 
		cin >> f; 
		if (! c.scale (f))
		{
			... 
		}

		c.draw();
		cout << area(c); 

		//c.m_r = -123; 
			//anyone writing anything can change stuff so make it private 
		cout << 2* 3.14159 * m_r; // this code is now illegal because we made the member variables private 
		cout << 2* 3.14159 * c.radius();
	}

	double area (const Circle& x) 
	{
		return PI * x.radius * x.radius;  // it cannot access these 		variables because they're private! 
	}

//constructor 	
Circle:: Circle (double x, double y, double r) 
: m_x(x), m_y(y), m_r(r)
{
	if (r < 0)
	{
		cout << "can't create circle with radius " << r << endl; 
		exit (1); 
	}
	m_x = x; 
	m_y = y; 
	m_r = r; 
}

bool Circle::scale (double factor)
{
	if (factor <= 0)
	{
		//don't do this! the low level function doesn't know what the right response is:
		cout << ....;
		exit (1); 

		//instead do this: 
		return false; 
	}
	
	m_r *= factor; 
	return true; 
}

void Circle::draw() const
{
		..draw a circle centered at (m_x, m_y)
		.. with radius m_r 
}

double Circle::radius() const
{
	return m_r; 
}

	member function 
		- dot operator 
	non-member function (ordinary function)
		- no dot operator
4. 
						 compiler 
	source file (.cpp)   -------->  object file 										libraries 
									- defines			- needs 
									  main				  cos library 						|
									  f (a function)      cout library 						|
									  														|
									  	|													|
									  	|													|
									  														|

							LINKER (obj+library)			EXECUTABLE generated 
5. member initialization list 
	- for built in data types (ints and whatnot), either way works 
	- you need MIL for other stuff (fri lecture)
6. the declaration, not the implementation of the function will determine if it will compile or not 
	- with doing const for something 